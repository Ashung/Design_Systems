
var onOpenDocument = function(context) {

    var updateURL = "https://ashung.github.io/Design_Systems/version.json";
    var dataURL = "https://ashung.github.io/Design_Systems/data.json";
    
    var pluginName = context.plugin.name();

    // Reload plugins
    AppController.sharedInstance().pluginManager().reloadPlugins();
    
    // Check version
    var localVersion = context.plugin.version();
    var checkVersion = getRemoteJson(updateURL);
    if (checkVersion) {
        
        var remoteVersion = checkVersion.version;
        
        log(pluginName + ": localVersion is " + localVersion + ", remoteVersion is " + remoteVersion);
        
        if (localVersion < remoteVersion) {

            var localManifestPath = context.plugin.url().path() + "/Contents/Sketch/manifest.json";
            var localManifest = getLocalJson(localManifestPath);

            // Version
            localManifest.version = localVersion.substring(0, localVersion.indexOf(".") + 1) + remoteVersion;

            // URL data
            var localDataPath = context.plugin.url().path() + "/Contents/Resources/data.json";
            var urls = {};

            // Menu and commands
            var data = getRemoteJson(dataURL);
            data.sort(function(a, b) {
                if (a.title > b.title) {
                    return 1;
                }
                if (a.title < b.title) {
                    return -1;
                }
                return 0;
            });
            
            // Reset commands and menu items
            localManifest.commands = [
                {
                    "handlers": {
                        "actions": {
                            "OpenDocument": "onOpenDocument"
                        }
                    },
                    "script": "design_systems.cocoascript"
                },
                {
                    "name": "Report Issues",
                    "identifier": "report_issues",
                    "handler": "reportIssues",
                    "script": "design_systems.cocoascript"
                },
                {
                    "name": "Submit a Design System",
                    "identifier": "submit",
                    "handler": "submit",
                    "script": "design_systems.cocoascript"
                }
            ];
            localManifest.menu.items = [];

            for (var i = 0; i < data.length; i++) {

                var menu = {
                    "title": data[i].title,
                    "items": []
                };

                for (var j = 0; j < data[i].commands.length; j++) {
                    if (data[i].commands[j].name === "-") {
                        menu.items.push("-");
                    } else {
                        var command = {
                            "name": data[i].commands[j].name,
                            "identifier": "id_" + i + "_" + j,
                            "script": "design_systems.cocoascript"
                        };
                        localManifest.commands.push(command);
                        menu.items.push(command.identifier);

                        urls[command.identifier] = {
                            "category": data[i].title,
                            "name": data[i].commands[j].name,
                            "url": data[i].commands[j].url,
                            "type": data[i].commands[j].type || "site"
                        };
                    }
                }

                localManifest.menu.items.push(menu);

            }

            localManifest.menu.items.push("-");
            localManifest.menu.items.push("report_issues");
            localManifest.menu.items.push("submit");

            // Write data.json
            writeContentToFile(localDataPath, JSON.stringify(urls, null, 2));

            // Write new manifest.json
            writeContentToFile(localManifestPath, JSON.stringify(localManifest, null, 2));

            // Reload plugins
            AppController.sharedInstance().pluginManager().reloadPlugins();

            log(pluginName + ": update finish.");
            
        }
    } else {
        log(pluginName + ": Can't visit " + updateURL + ".");
    }
};

var onRun = function(context) {

    var localDataPath = context.plugin.urlForResourceNamed("data.json").path();
    var pluginIdentifier = context.command.identifier();
    var localData = getLocalJson(localDataPath);

    if (localData) {

        var url = localData[pluginIdentifier].url;
        
        if (localData[pluginIdentifier].type === "site") {
            var ref = context.plugin.homepageURL().toString().replace(new RegExp("http[s]*:\/\/"), "");
            url = url + "?ref=" + ref;
        }
        
        // Google Analytics
        ga(
            "UA-99098773-2",
            encodeURI(context.plugin.name()),
            context.plugin.identifier(),
            context.plugin.version(),
            encodeURI(localData[pluginIdentifier].category),
            encodeURI(localData[pluginIdentifier].name)
        );

        openUrlInBrowser(url);

    } else {
        log(pluginName + ": Read file " + localDataPath + " error.");
    }

};

var reportIssues = function(context) {
    var url = context.plugin.homepageURL() + "/issues/new";
    openUrlInBrowser(url);
};

var submit = function(context) {
    var url = context.plugin.homepageURL() + "/issues/new?title=Add%20a%20Design%20System&body=Tell%20me%20the%20url";
    openUrlInBrowser(url);
};

function getLocalJson(path) {
    if (NSFileManager.defaultManager().fileExistsAtPath_(path)) {
        var content = NSString.stringWithContentsOfFile_encoding_error_(path, NSUTF8StringEncoding, nil);
        return JSON.parse(content);
    } else {
        return null;
    }
}

function getRemoteJson(url) {
    var request = NSURLRequest.requestWithURL(NSURL.URLWithString(url));
    var response = NSURLConnection.sendSynchronousRequest_returningResponse_error_(request, nil, nil);
    if (response) {
        var content = NSString.alloc().initWithData_encoding_(response, NSUTF8StringEncoding);
        return JSON.parse(content);
    } else {
        return null;
    }
}

function writeContentToFile(path, content) {
    NSString.stringWithString(content).writeToFile_atomically_encoding_error_(
        path, true, NSUTF8StringEncoding, nil
    );
}

function openUrlInBrowser(url) {
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}

function ga(tarkingId, appName, appId, appVersion, eventCategory, eventAction) {

    var uuidKey = 'google.analytics.uuid';
    var uuid = NSUserDefaults.standardUserDefaults().objectForKey(uuidKey);
    if (!uuid) {
        uuid = NSUUID.UUID().UUIDString();
        NSUserDefaults.standardUserDefaults().setObject_forKey(uuid, uuidKey);
    }
    
    // IP
    // var ip = NSString.stringWithContentsOfURL_encoding_error_(
    //     NSURL.URLWithString("https://icanhazip.com/"),
    //     NSUTF8StringEncoding,
    //     nil
    // ).stringByTrimmingCharactersInSet(NSCharacterSet.newlineCharacterSet());
    
    var url = "https://www.google-analytics.com/collect?";
    url += "v=1" + "&";
    // Tracking ID
    url += "tid=" + tarkingId + "&";
    // Source
    url += "ds=sketch" + MSApplicationMetadata.metadata().appVersion + "&";
    // Client ID
    url += "cid=" + uuid + "&";
    // User IP
    // url += "uip=" + ip + "&";
    // User GEO location
    url += "geoid=" + NSLocale.currentLocale().countryCode() + "&";
    // User language
    url += "ul=" + NSLocale.currentLocale().localeIdentifier().toLowerCase() + "&";
    // pageview, screenview, event, transaction, item, social, exception, timing
    url += "t=event" + "&";
    // App Name
    url += "an=" + appName + "&";
    // App ID
    url += "aid=" + appId + "&";
    // App Version
    url += "av=" + appVersion + "&";
    // Event category
    url += "ec=" + eventCategory + "&";
    // Event action
    url += "ea=" + eventAction;
    
    var session = NSURLSession.sharedSession();
    var task = session.dataTaskWithURL(NSURL.URLWithString(NSString.stringWithString(url)));
    task.resume();

}
